# 0 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h" 1
# 16 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h"
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h" 1
# 21 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/X64/ProcessorBind.h" 1
# 162 "/home/enyephy/edk2/edk2/MdePkg/Include/X64/ProcessorBind.h"
typedef unsigned long long UINT64;



typedef long long INT64;



typedef unsigned int UINT32;



typedef int INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;






typedef UINT64 UINTN;




typedef INT64 INTN;
# 22 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h" 2
# 213 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 607 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef __builtin_ms_va_list VA_LIST;
# 711 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 816 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT8) == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT8) == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT16) == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT16) == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT32) == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT32) == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT64) == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT64) == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR8) == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR16) == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INTN) == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINTN) == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (void *) == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");
# 852 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE) == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
# 1026 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h" 2
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 809 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdSetSku (
  UINTN SkuId
  );
# 825 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGet8 (
  UINTN TokenNumber
  );
# 841 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGet16 (
  UINTN TokenNumber
  );
# 857 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGet32 (
  UINTN TokenNumber
  );
# 873 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGet64 (
  UINTN TokenNumber
  );
# 889 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetPtr (
  UINTN TokenNumber
  );
# 905 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetBool (
  UINTN TokenNumber
  );
# 919 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSize (
  UINTN TokenNumber
  );
# 939 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8

LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 960 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16

LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 978 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32

LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 999 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64

LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1020 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1041 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN

LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1062 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1081 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1100 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1119 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1138 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1167 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1187 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1210 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1234 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1258 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1282 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1312 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1337 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1361 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
( *PCD_CALLBACK)(
  const GUID *CallBackGuid ,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1386 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCallbackOnSet (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1407 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdCancelCallback (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1434 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetNextToken (
  const GUID *Guid ,
  UINTN TokenNumber
  );
# 1454 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *

LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1483 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1515 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1549 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *

LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1584 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS

LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1635 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1655 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void

LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1670 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN

LibPcdGetSku (
  void
  );
# 18 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;
# 30 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h"
extern GUID gEfiFileSystemVolumeLabelInfoIdGuid;
extern GUID gEfiFileInfoGuid;
extern GUID gEfiFileSystemInfoGuid;
extern GUID gEmulatorPkgTokenSpaceGuid;
extern GUID gEfiMdeModulePkgTokenSpaceGuid;
extern GUID gEfiMdePkgTokenSpaceGuid;


extern GUID gEmuIoThunkProtocolGuid;
extern GUID gEmuGraphicsWindowProtocolGuid;
extern GUID gEmuThreadThunkProtocolGuid;
extern GUID gEmuBlockIoProtocolGuid;
extern GUID gEmuSnpProtocolGuid;
extern GUID gEfiSimpleFileSystemProtocolGuid;


extern GUID gEfiPeiStatusCodePpiGuid;
extern GUID gEmuThunkPpiGuid;


extern UINT64 _gPcd_SkuId_Array[];







extern const BOOLEAN _gPcd_FixedAtBuild_PcdEmulatorLazyLoadSymbols;







extern const UINT32 _gPcd_FixedAtBuild_PcdEmuBootMode;





extern const UINT16 _gPcd_FixedAtBuild_PcdEmuFirmwareVolume[21];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuMemorySize[6];
# 90 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h"
extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFdBaseAddress;







extern const UINT32 _gPcd_FixedAtBuild_PcdEmuFirmwareFdSize;







extern const UINT32 _gPcd_FixedAtBuild_PcdEmuFirmwareBlockSize;





extern const UINT16 _gPcd_FixedAtBuild_PcdEmuApCount[2];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuVirtualDisk[12];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuGop[11];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuFileSystem[2];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuSerialPort[11];







extern const UINT16 _gPcd_FixedAtBuild_PcdEmuNetworkInterface[4];
# 162 "/home/enyephy/edk2/edk2/Build/EmulatorX64/DEBUG_GCC5/X64/EmulatorPkg/Unix/Host/Host/DEBUG/AutoGen.h"
extern const UINT32 _gPcd_FixedAtBuild_PcdNetworkPacketFilterSize;







extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFlashFvRecoveryBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdEmuFlashFvRecoverySize;







extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFlashNvStorageVariableBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdFlashNvStorageVariableSize;







extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFlashNvStorageEventLogBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdEmuFlashNvStorageEventLogSize;







extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFlashNvStorageFtwWorkingBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdFlashNvStorageFtwWorkingSize;







extern const UINT64 _gPcd_FixedAtBuild_PcdEmuFlashNvStorageFtwSpareBase;







extern const UINT32 _gPcd_FixedAtBuild_PcdFlashNvStorageFtwSpareSize;







extern const UINT64 _gPcd_FixedAtBuild_PcdPeiServicesTablePage;







extern const UINT32 _gPcd_FixedAtBuild_PcdPersistentMemorySize;
# 0 "<command-line>" 2
# 1 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
#------------------------------------------------------------------------------

# Manage differenced between UNIX ABI and EFI/Windows ABI

# EFI Arg passing: RCX, RDX, R8, R9
# Callee allocates 32 bytes on stack to spill registers
# UNIX Arg passing: RDI, RSI, RDX, RCX, R8, R9
# RSI, RDI calle-save on EFI, scatch on UNIX callign

# Copyright (c) 2008 - 2011, Apple Inc. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent

#------------------------------------------------------------------------------






  .text
# 29 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
  .text
# 38 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
.globl GasketSecWriteStdErr
GasketSecWriteStdErr:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecWriteStdErr

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecConfigStdIn
GasketSecConfigStdIn:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecConfigStdIn

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecWriteStdOut
GasketSecWriteStdOut:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecWriteStdOut

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecReadStdIn
GasketSecReadStdIn:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecReadStdIn

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecPollStdIn
GasketSecPollStdIn:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecPollStdIn

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecMalloc
GasketSecMalloc:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecMalloc

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecValloc
GasketSecValloc:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecValloc

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecFree
GasketSecFree:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecFree

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecSetTimer
GasketSecSetTimer:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecSetTimer

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecEnableInterrupt
GasketSecEnableInterrupt:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecEnableInterrupt

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecDisableInterrupt
GasketSecDisableInterrupt:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecDisableInterrupt

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketQueryPerformanceFrequency
GasketQueryPerformanceFrequency:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call QueryPerformanceFrequency

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketQueryPerformanceCounter
GasketQueryPerformanceCounter:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call QueryPerformanceCounter

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecSleep
GasketSecSleep:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecSleep

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecCpuSleep
GasketSecCpuSleep:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecCpuSleep

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecExit
GasketSecExit:
  pushq %rbp
  movq %rsp, %rbp

  movq %rcx, %rdi
  call SecExit
LDEAD_LOOP:
  jmp LDEAD_LOOP


.globl GasketSecGetTime
GasketSecGetTime:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecGetTime

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecSetTime
GasketSecSetTime:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecSetTime

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecGetNextProtocol
GasketSecGetNextProtocol:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call SecGetNextProtocol

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSecPeCoffGetEntryPoint
GasketSecPeCoffGetEntryPoint:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call SecPeCoffGetEntryPoint

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecPeCoffRelocateImageExtraAction
GasketSecPeCoffRelocateImageExtraAction:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecPeCoffRelocateImageExtraAction

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketSecPeCoffUnloadImageExtraAction
GasketSecPeCoffUnloadImageExtraAction:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call SecPeCoffUnloadImageExtraAction

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecEmuThunkAddress
GasketSecEmuThunkAddress:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  call SecEmuThunkAddress

  popq %rdi
  popq %rsi
  popq %rbp
  ret





.globl GasketX11Size
GasketX11Size:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call X11Size

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11CheckKey
GasketX11CheckKey:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call X11CheckKey

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketX11GetKey
GasketX11GetKey:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call X11GetKey

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11KeySetState
GasketX11KeySetState:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call X11KeySetState

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11RegisterKeyNotify
GasketX11RegisterKeyNotify:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call X11RegisterKeyNotify

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11Blt
GasketX11Blt:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call X11Blt

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11CheckPointer
GasketX11CheckPointer:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call X11CheckPointer

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11GetPointerState
GasketX11GetPointerState:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call X11GetPointerState

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11GraphicsWindowOpen
GasketX11GraphicsWindowOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call X11GraphicsWindowOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketX11GraphicsWindowClose
GasketX11GraphicsWindowClose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %r9, %rcx

  call X11GraphicsWindowClose

  popq %rdi
  popq %rsi
  popq %rbp
  ret




.globl GasketPthreadMutexLock
GasketPthreadMutexLock:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadMutexLock

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPthreadMutexUnLock
GasketPthreadMutexUnLock:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadMutexUnLock

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketPthreadMutexTryLock
GasketPthreadMutexTryLock:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadMutexTryLock

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketPthreadMutexInit
GasketPthreadMutexInit:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi


  call PthreadMutexInit

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketPthreadMutexDestroy
GasketPthreadMutexDestroy:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadMutexDestroy

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPthreadCreate
GasketPthreadCreate:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call PthreadCreate

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPthreadExit
GasketPthreadExit:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadExit

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketPthreadSelf
GasketPthreadSelf:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi


  call PthreadSelf

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPthreadOpen
GasketPthreadOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPthreadClose
GasketPthreadClose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PthreadClose

  popq %rdi
  popq %rsi
  popq %rbp
  ret
# 818 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
.globl ReverseGasketUint64
ReverseGasketUint64:
  pushq %rbp
  movq %rsp, %rbp

  movq %rdi, %rax
  movq %rsi, %rcx

  subq $32, %rsp
  call *%rax
  addq $32, %rsp

  popq %rbp
  ret
# 842 "/home/enyephy/edk2/edk2/EmulatorPkg/Unix/Host/X64/Gasket.S"
.globl ReverseGasketUint64Uint64
ReverseGasketUint64Uint64:
  pushq %rbp
  movq %rsp, %rbp

  movq %rdi, %rax
  movq %rsi, %rcx

  subq $32, %rsp
  call *%rax
  addq $32, %rsp

  popq %rbp
  ret


.globl GasketSecUnixPeiAutoScan
GasketSecUnixPeiAutoScan:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call SecUnixPeiAutoScan

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSecUnixFdAddress
GasketSecUnixFdAddress:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call SecUnixFdAddress

  popq %rdi
  popq %rsi
  popq %rbp
  ret




.globl GasketPosixOpenVolume
GasketPosixOpenVolume:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call PosixOpenVolume

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileOpen
GasketPosixFileOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8

  call PosixFileOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileCLose
GasketPosixFileCLose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PosixFileCLose

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileDelete
GasketPosixFileDelete:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PosixFileDelete

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileRead
GasketPosixFileRead:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call PosixFileRead

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileWrite
GasketPosixFileWrite:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call PosixFileWrite

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileSetPossition
GasketPosixFileSetPossition:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call PosixFileSetPossition

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileGetPossition
GasketPosixFileGetPossition:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call PosixFileGetPossition

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileGetInfo
GasketPosixFileGetInfo:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call PosixFileGetInfo

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileSetInfo
GasketPosixFileSetInfo:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call PosixFileSetInfo

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileFlush
GasketPosixFileFlush:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PosixFileFlush

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileSystmeThunkOpen
GasketPosixFileSystmeThunkOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PosixFileSystmeThunkOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketPosixFileSystmeThunkClose
GasketPosixFileSystmeThunkClose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call PosixFileSystmeThunkClose

  popq %rdi
  popq %rsi
  popq %rbp
  ret

.globl GasketEmuBlockIoReset
GasketEmuBlockIoReset:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call EmuBlockIoReset

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketEmuBlockIoReadBlocks
GasketEmuBlockIoReadBlocks:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8
  movq 56(%rbp), %r9

  call EmuBlockIoReadBlocks

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketEmuBlockIoWriteBlocks
GasketEmuBlockIoWriteBlocks:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8
  movq 56(%rbp), %r9

  call EmuBlockIoWriteBlocks

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketEmuBlockIoFlushBlocks
GasketEmuBlockIoFlushBlocks:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call EmuBlockIoFlushBlocks

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketEmuBlockIoCreateMapping
GasketEmuBlockIoCreateMapping:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call EmuBlockIoCreateMapping

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketBlockIoThunkOpen
GasketBlockIoThunkOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuBlockIoThunkOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketBlockIoThunkClose
GasketBlockIoThunkClose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuBlockIoThunkClose

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSnpCreateMapping
GasketSnpCreateMapping:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call EmuSnpCreateMapping

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpStart
GasketSnpStart:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuSnpStart

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpStop
GasketSnpStop:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuSnpStop

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpInitialize
GasketSnpInitialize:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call EmuSnpInitialize

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSnpReset
GasketSnpReset:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi

  call EmuSnpReset

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpShutdown
GasketSnpShutdown:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuSnpShutdown

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpReceiveFilters
GasketSnpReceiveFilters:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8
  movq 56(%rbp), %r9

  call EmuSnpReceiveFilters

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpStationAddress
GasketSnpStationAddress:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call EmuSnpStationAddress

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSnpStatistics
GasketSnpStatistics:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call EmuSnpStatistics

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpMCastIpToMac
GasketSnpMCastIpToMac:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx

  call EmuSnpMCastIpToMac

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpNvData
GasketSnpNvData:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8

  call EmuSnpNvData

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpGetStatus
GasketSnpGetStatus:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx

  call EmuSnpGetStatus

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSnpTransmit
GasketSnpTransmit:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8
  movq 56(%rbp), %r9
  movq 64(%rbp), %rax
  movq %rax, (%rsp)

  call EmuSnpTransmit
  addq $16, %rsp

  popq %rdi
  popq %rsi
  popq %rbp
  ret



.globl GasketSnpReceive
GasketSnpReceive:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi
  movq %rdx, %rsi
  movq %r8, %rdx
  movq %r9, %rcx
  movq 48(%rbp), %r8
  movq 56(%rbp), %r9
  movq 64(%rbp), %rax
  movq %rax, (%rsp)

  call EmuSnpReceive
  addq $16, %rsp

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpThunkOpen
GasketSnpThunkOpen:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuSnpThunkOpen

  popq %rdi
  popq %rsi
  popq %rbp
  ret


.globl GasketSnpThunkClose
GasketSnpThunkClose:
  pushq %rbp
  movq %rsp, %rbp

  pushq %rsi
  pushq %rdi

  movq %rcx, %rdi

  call EmuSnpThunkClose

  popq %rdi
  popq %rsi
  popq %rbp
  ret
