;------------------------------------------------------------------------------ ;
; Copyright (c) 2024, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
; Module Name:
;
; SmmInit.nasm
;
; Abstract:
;
; Functions for relocating SMBASE's for all processors
;
;-------------------------------------------------------------------------------

%include "StuffRsbNasm.inc"

extern SmmInitHandler
extern mRebasedFlag
extern mSmmRelocationOriginalAddress

global gPatchSmmInitCr3
global gPatchSmmInitCr4
global gPatchSmmInitCr0
global gPatchSmmInitStack
global gcSmmInitGdtr
global gcSmmInitSize
global gcSmmInitTemplate

%define PROTECT_MODE_CS 0x8
%define PROTECT_MODE_DS 0x20

    SECTION .data

NullSeg: DQ 0 ; reserved by architecture
CodeSeg32:
            DW -1 ; LimitLow
            DW 0 ; BaseLow
            DB 0 ; BaseMid
            DB 0x9b
            DB 0xcf ; LimitHigh
            DB 0 ; BaseHigh
ProtModeCodeSeg32:
            DW -1 ; LimitLow
            DW 0 ; BaseLow
            DB 0 ; BaseMid
            DB 0x9b
            DB 0xcf ; LimitHigh
            DB 0 ; BaseHigh
ProtModeSsSeg32:
            DW -1 ; LimitLow
            DW 0 ; BaseLow
            DB 0 ; BaseMid
            DB 0x93
            DB 0xcf ; LimitHigh
            DB 0 ; BaseHigh
DataSeg32:
            DW -1 ; LimitLow
            DW 0 ; BaseLow
            DB 0 ; BaseMid
            DB 0x93
            DB 0xcf ; LimitHigh
            DB 0 ; BaseHigh
CodeSeg16:
            DW -1
            DW 0
            DB 0
            DB 0x9b
            DB 0x8f
            DB 0
DataSeg16:
            DW -1
            DW 0
            DB 0
            DB 0x93
            DB 0x8f
            DB 0
CodeSeg64:
            DW -1 ; LimitLow
            DW 0 ; BaseLow
            DB 0 ; BaseMid
            DB 0x9b
            DB 0xaf ; LimitHigh
            DB 0 ; BaseHigh
GDT_SIZE equ $ - NullSeg

gcSmmInitGdtr:
    DW GDT_SIZE - 1
    DD NullSeg


    SECTION .text

global SmmStartup

BITS 16
SmmStartup:
    mov eax, 0x80000001 ; read capability
    cpuid
    mov ebx, edx ; rdmsr will change edx. keep it in ebx.
    and ebx, 0x00100000 ; extract NX capability bit
    shr ebx, 9 ; shift bit to IA32_EFER.NXE[0x00000800] position
    mov eax, strict dword 0 ; source operand will be patched
gPatchSmmInitCr3:
    mov cr3, eax
o32 lgdt [cs:ebp + (gcSmmInitGdtr - SmmStartup)]
    mov eax, strict dword 0 ; source operand will be patched
gPatchSmmInitCr4:
    mov cr4, eax
    mov ecx, 0xc0000080 ; IA32_EFER MSR
    rdmsr
    or eax, ebx ; set NXE bit if NX is available
    wrmsr
    mov eax, strict dword 0 ; source operand will be patched
gPatchSmmInitCr0:
    mov di, PROTECT_MODE_DS
    mov cr0, eax
    jmp PROTECT_MODE_CS : dword @32bit

BITS 32
@32bit:
    mov ds, edi
    mov es, edi
    mov fs, edi
    mov gs, edi
    mov ss, edi
    mov esp, strict dword 0 ; source operand will be patched
gPatchSmmInitStack:
    call SmmInitHandler
    StuffRsb32
    rsm

BITS 16
gcSmmInitTemplate:
    mov ebp, SmmStartup
    sub ebp, 0x30000
    jmp ebp

gcSmmInitSize: DW $ - gcSmmInitTemplate

BITS 32
global SmmRelocationSemaphoreComplete
SmmRelocationSemaphoreComplete:
    push eax
    mov eax, [mRebasedFlag]
    mov byte [eax], 1
    pop eax
    jmp [mSmmRelocationOriginalAddress]

global SmmInitFixupAddress
SmmInitFixupAddress:
    ret
