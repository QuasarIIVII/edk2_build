# 0 "/home/enyephy/edk2/edk2/MdePkg/Library/BaseLib/Ia32/DivU64x64Remainder.nasm"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "/home/enyephy/edk2/edk2/Build/OvmfIa32/RELEASE_GCC5/IA32/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 1
# 16 "/home/enyephy/edk2/edk2/Build/OvmfIa32/RELEASE_GCC5/IA32/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h"
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h" 1
# 21 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/Ia32/ProcessorBind.h" 1
# 163 "/home/enyephy/edk2/edk2/MdePkg/Include/Ia32/ProcessorBind.h"
typedef unsigned long long UINT64;



typedef long long INT64;



typedef unsigned int UINT32;



typedef int INT32;



typedef unsigned short UINT16;




typedef unsigned short CHAR16;



typedef short INT16;




typedef unsigned char BOOLEAN;



typedef unsigned char UINT8;



typedef char CHAR8;



typedef signed char INT8;






typedef UINT32 UINTN;




typedef INT32 INTN;
# 22 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h" 2
# 213 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef struct {
  UINT32 Data1;
  UINT16 Data2;
  UINT16 Data3;
  UINT8 Data4[8];
} GUID;




typedef struct {
  UINT8 Addr[4];
} IPv4_ADDRESS;




typedef struct {
  UINT8 Addr[16];
} IPv6_ADDRESS;




typedef UINT64 PHYSICAL_ADDRESS;




typedef struct _LIST_ENTRY LIST_ENTRY;




struct _LIST_ENTRY {
  LIST_ENTRY *ForwardLink;
  LIST_ENTRY *BackLink;
};
# 626 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef __builtin_va_list VA_LIST;
# 711 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef UINTN *BASE_LIST;
# 816 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
_Static_assert (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT8) == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT8) == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT16) == 2, "sizeof (INT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT16) == 2, "sizeof (UINT16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT32) == 4, "sizeof (INT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT32) == 4, "sizeof (UINT32) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (INT64) == 8, "sizeof (INT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (UINT64) == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR8) == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (CHAR16) == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L'A') == 2, "sizeof (L'A') does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (L"A") == 4, "sizeof (L\"A\") does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (BOOLEAN) == sizeof (BOOLEAN), "Alignment of BOOLEAN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT8) == sizeof (INT8), "Alignment of INT8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT8) == sizeof (UINT8), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT16) == sizeof (INT16), "Alignment of INT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT16) == sizeof (UINT16), "Alignment of UINT16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT32) == sizeof (INT32), "Alignment of INT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT32) == sizeof (UINT32), "Alignment of UINT32 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INT64) == sizeof (INT64), "Alignment of INT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINT64) == sizeof (UINT64), "Alignment of UINT64 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR8) == sizeof (CHAR8), "Alignment of CHAR8 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (CHAR16) == sizeof (CHAR16), "Alignment of CHAR16 does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (INTN) == sizeof (INTN), "Alignment of INTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (UINTN) == sizeof (UINTN), "Alignment of UINTN does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (void *) == sizeof (void *), "Alignment of VOID * does not meet UEFI Specification Data Type requirements");
# 852 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef enum {
  __VerifyUint8EnumValue = 0xff
} __VERIFY_UINT8_ENUM_SIZE;

typedef enum {
  __VerifyUint16EnumValue = 0xffff
} __VERIFY_UINT16_ENUM_SIZE;

typedef enum {
  __VerifyInt32EnumValue = 0x7fffffff
} __VERIFY_INT32_ENUM_SIZE;

_Static_assert (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (sizeof (__VERIFY_INT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");

_Static_assert (_Alignof (__VERIFY_UINT8_ENUM_SIZE) == sizeof (__VERIFY_UINT8_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_UINT16_ENUM_SIZE) == sizeof (__VERIFY_UINT16_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
_Static_assert (_Alignof (__VERIFY_INT32_ENUM_SIZE) == sizeof (__VERIFY_INT32_ENUM_SIZE), "Alignment of enum does not meet UEFI Specification Data Type requirements");
# 1026 "/home/enyephy/edk2/edk2/MdePkg/Include/Base.h"
typedef UINTN RETURN_STATUS;
# 17 "/home/enyephy/edk2/edk2/Build/OvmfIa32/RELEASE_GCC5/IA32/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 2
# 1 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h" 1
# 809 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN
__attribute__((cdecl))
LibPcdSetSku (
  UINTN SkuId
  );
# 825 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8
__attribute__((cdecl))
LibPcdGet8 (
  UINTN TokenNumber
  );
# 841 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16
__attribute__((cdecl))
LibPcdGet16 (
  UINTN TokenNumber
  );
# 857 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32
__attribute__((cdecl))
LibPcdGet32 (
  UINTN TokenNumber
  );
# 873 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64
__attribute__((cdecl))
LibPcdGet64 (
  UINTN TokenNumber
  );
# 889 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *
__attribute__((cdecl))
LibPcdGetPtr (
  UINTN TokenNumber
  );
# 905 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN
__attribute__((cdecl))
LibPcdGetBool (
  UINTN TokenNumber
  );
# 919 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN
__attribute__((cdecl))
LibPcdGetSize (
  UINTN TokenNumber
  );
# 939 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT8
__attribute__((cdecl))
LibPcdGetEx8 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 960 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT16
__attribute__((cdecl))
LibPcdGetEx16 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 978 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT32
__attribute__((cdecl))
LibPcdGetEx32 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 999 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINT64
__attribute__((cdecl))
LibPcdGetEx64 (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1020 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *
__attribute__((cdecl))
LibPcdGetExPtr (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1041 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
BOOLEAN
__attribute__((cdecl))
LibPcdGetExBool (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1062 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN
__attribute__((cdecl))
LibPcdGetExSize (
  const GUID *Guid,
  UINTN TokenNumber
  );
# 1081 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSet8S (
  UINTN TokenNumber,
  UINT8 Value
  );
# 1100 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSet16S (
  UINTN TokenNumber,
  UINT16 Value
  );
# 1119 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSet32S (
  UINTN TokenNumber,
  UINT32 Value
  );
# 1138 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSet64S (
  UINTN TokenNumber,
  UINT64 Value
  );
# 1167 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetPtrS (
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1187 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetBoolS (
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1210 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetEx8S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT8 Value
  );
# 1234 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetEx16S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT16 Value
  );
# 1258 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetEx32S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT32 Value
  );
# 1282 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetEx64S (
  const GUID *Guid,
  UINTN TokenNumber,
  UINT64 Value
  );
# 1312 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetExPtrS (
  const GUID *Guid,
  UINTN TokenNumber,
  UINTN *SizeOfBuffer,
  void *Buffer
  );
# 1337 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPcdSetExBoolS (
  const GUID *Guid,
  UINTN TokenNumber,
  BOOLEAN Value
  );
# 1361 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
typedef
void
(__attribute__((cdecl)) *PCD_CALLBACK)(
  const GUID *CallBackGuid ,
  UINTN CallBackToken,
  void *TokenData,
  UINTN TokenDataSize
  );
# 1386 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void
__attribute__((cdecl))
LibPcdCallbackOnSet (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1407 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void
__attribute__((cdecl))
LibPcdCancelCallback (
  const GUID *Guid ,
  UINTN TokenNumber,
  PCD_CALLBACK NotificationFunction
  );
# 1434 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN
__attribute__((cdecl))
LibPcdGetNextToken (
  const GUID *Guid ,
  UINTN TokenNumber
  );
# 1454 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
GUID *
__attribute__((cdecl))
LibPcdGetNextTokenSpace (
  const GUID *TokenSpaceGuid
  );
# 1483 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *
__attribute__((cdecl))
LibPatchPcdSetPtr (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1515 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPatchPcdSetPtrS (
  void *PatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1549 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void *
__attribute__((cdecl))
LibPatchPcdSetPtrAndSize (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );
# 1584 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
RETURN_STATUS
__attribute__((cdecl))
LibPatchPcdSetPtrAndSizeS (
  void *PatchVariable,
  UINTN *SizeOfPatchVariable,
  UINTN MaximumDatumSize,
  UINTN *SizeOfBuffer,
  const void *Buffer
  );

typedef enum {
  PCD_TYPE_8,
  PCD_TYPE_16,
  PCD_TYPE_32,
  PCD_TYPE_64,
  PCD_TYPE_BOOL,
  PCD_TYPE_PTR
} PCD_TYPE;

typedef struct {




  PCD_TYPE PcdType;




  UINTN PcdSize;






  CHAR8 *PcdName;
} PCD_INFO;
# 1635 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void
__attribute__((cdecl))
LibPcdGetInfo (
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1655 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
void
__attribute__((cdecl))
LibPcdGetInfoEx (
  const GUID *Guid,
  UINTN TokenNumber,
  PCD_INFO *PcdInfo
  );
# 1670 "/home/enyephy/edk2/edk2/MdePkg/Include/Library/PcdLib.h"
UINTN
__attribute__((cdecl))
LibPcdGetSku (
  void
  );
# 18 "/home/enyephy/edk2/edk2/Build/OvmfIa32/RELEASE_GCC5/IA32/MdePkg/Library/BaseLib/BaseLib/DEBUG/AutoGen.h" 2

extern GUID gEfiCallerIdGuid;
extern GUID gEdkiiDscPlatformGuid;
extern CHAR8 *gEfiCallerBaseName;




extern GUID gEfiMdePkgTokenSpaceGuid;


extern UINT64 _gPcd_SkuId_Array[];



extern const BOOLEAN _gPcd_FixedAtBuild_PcdVerifyNodeInList;



extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumLinkedListLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumAsciiStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdMaximumUnicodeStringLength;






extern const UINT32 _gPcd_FixedAtBuild_PcdControlFlowEnforcementPropertyMask;






extern const UINT8 _gPcd_FixedAtBuild_PcdSpeculationBarrierType;
# 0 "<command-line>" 2
# 1 "/home/enyephy/edk2/edk2/MdePkg/Library/BaseLib/Ia32/DivU64x64Remainder.nasm"
;------------------------------------------------------------------------------
;
; Copyright (c) 2006, Intel Corporation. All rights reserved.<BR>
; SPDX-License-Identifier: BSD-2-Clause-Patent
;
; Module Name:
;
; DivU64x64Remainder.nasm
;
; Abstract:
;
; Calculate the quotient of a 64-bit integer by a 64-bit integer and returns
; both the quotient and the remainder
;
;------------------------------------------------------------------------------

    SECTION .text

extern InternalMathDivRemU64x32

;------------------------------------------------------------------------------
; UINT64
; __attribute__((cdecl))
; InternalMathDivRemU64x64 (
; UINT64 Dividend,
; UINT64 Divisor,
; UINT64 *Remainder
; );
;------------------------------------------------------------------------------
global InternalMathDivRemU64x64
InternalMathDivRemU64x64:
    mov ecx, [esp + 16] ; ecx <- divisor[32..63]
    test ecx, ecx
    jnz _@DivRemU64x64 ; call _@DivRemU64x64 if Divisor > 2^32
    mov ecx, [esp + 20]
    jecxz .0
    and dword [ecx + 4], 0 ; zero high dword of remainder
    mov [esp + 16], ecx ; set up stack frame to match DivRemU64x32
.0:
    jmp InternalMathDivRemU64x32

_@DivRemU64x64:
    push ebx
    push esi
    push edi
    mov edx, dword [esp + 20]
    mov eax, dword [esp + 16] ; edx:eax <- dividend
    mov edi, edx
    mov esi, eax ; edi:esi <- dividend
    mov ebx, dword [esp + 24] ; ecx:ebx <- divisor
.1:
    shr edx, 1
    rcr eax, 1
    shrd ebx, ecx, 1
    shr ecx, 1
    jnz .1
    div ebx
    mov ebx, eax ; ebx <- quotient
    mov ecx, [esp + 28] ; ecx <- high dword of divisor
    mul dword [esp + 24] ; edx:eax <- quotient * divisor[0..31]
    imul ecx, ebx ; ecx <- quotient * divisor[32..63]
    add edx, ecx ; edx <- (quotient * divisor)[32..63]
    mov ecx, dword [esp + 32] ; ecx <- addr for Remainder
    jc @TooLarge ; product > 2^64
    cmp edi, edx ; compare high 32 bits
    ja @Correct
    jb @TooLarge ; product > dividend
    cmp esi, eax
    jae @Correct ; product <= dividend
@TooLarge:
    dec ebx ; adjust quotient by -1
    jecxz @Return ; return if Remainder == ((void *) 0)
    sub eax, dword [esp + 24]
    sbb edx, dword [esp + 28] ; edx:eax <- (quotient - 1) * divisor
@Correct:
    jecxz @Return
    sub esi, eax
    sbb edi, edx ; edi:esi <- remainder
    mov [ecx], esi
    mov [ecx + 4], edi
@Return:
    mov eax, ebx ; eax <- quotient
    xor edx, edx ; quotient is 32 bits long
    pop edi
    pop esi
    pop ebx
    ret
